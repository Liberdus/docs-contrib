{"getting_started":{"title":"getting_started","links":[],"tags":[],"content":"Overview\nDuring the time contributing to the liberdus project, creating a local network is a great way to test your changes and see how they affect the network. This guide will walk you through the process of setting up a local network and launching it.\nLiberdus network is built on top of shardus protocol which is framework for building sharded and decentralized apps. The primary library @shardus/core is powered by rust binded networking protocol.\nPrerequisites\nMake sure you system has the following installed:\n\nRust\nNode.js\nPython3\n\nThe exact version of nodejs version required can be oberseved in liberdus/server’s package.json file.\nCloning the repositories\nFirst, clone the liberdus repository to your local machine. You can do this by running the following command:\ngit clone github.com/Liberdus/server.git\nPlease use dev branch for the latest changes.\ngit checkout dev\nOnce the repository is cloned, navigate to the repo directory and install the dependencies by running:\ncd server\nnpm install\nTo launch a local network, shardus provide a process manager that allow you to launch multiple network along with an archiver and monitoring system to form a working network. Install the shardus cli tool by running:\nnpm install -g shardus\nLaunching the network\nTo launch a local network, you can use the shardus cli tool. The following command will launch a network with 10 validator node, archiver node and a monitor server.\nshardus create-net 10\nAfter creating the network, you can observe the network status by visiting http://localhost:3000.\nLaunching the rpc server\nClone the rpc server repository to your local machine. You can do this by running the following command:\ngit clone git@github.com:Liberdus/liberdus-rpc.git\nOnce the repository is cloned, navigate to the repo directory and install the dependencies by running:\ncd liberdus-rpc\nrustup install 1.81\nrustup default 1.81\nTo launch the server, run the following command:\ncargo run\nRPC server will be running on http://localhost:8545.\nLaunching the liberdus demo client\nIn order to interact with the network, you can use the liberdus demo client. Clone the repository to your local machine by running the following command:\ngit clone github.com/Liberdus/liberdus-web-client.git\nTo run the vue project\ncd liberdus-web-client\nnpm install\nnpm run serve"},"index":{"title":"index","links":["getting_started","rpc/"],"tags":[],"content":"Welcome contributors!\nThis documentation site is dedicated for contributing changes to liberdus network tech stack itself. Here are some useful links to get you started:\n\nGetting Started\nRPC\n"},"rpc/api":{"title":"api","links":[],"tags":[],"content":"Liberdus RPC Documentation\nThis document describes the available RPC methods for interacting with the Liberdus backend. These methods allow developers to perform operations such as sending transactions, retrieving transaction receipts, managing subscriptions, and more.\n\nMethods Overview\n\nlib_send_transaction: Injects a transaction into the Liberdus system with retry logic.\nlib_get_transaction_receipt: Retrieves the receipt of a specific transaction.\nlib_get_transaction_history: Fetches the transaction history for a given account.\nlib_get_account: Fetches account details based on an address.\nlib_get_messages: Retrieves chat messages for a specific chat ID.\nlib_subscribe: Subscribes to a chat room for updates.\nlib_unsubscribe: Unsubscribes from a chat room.\n\n\nlib_send_transaction\nDescription:\nInjects a transaction into the Liberdus system with retry logic.\nParameters:\n\nparams: Stringified Transaction Object.\n\nReturns:\n\nSuccess Response:\n{\n    &quot;jsonrpc&quot;: &quot;2.0&quot;,\n    &quot;id&quot;: &lt;request_id&gt;,\n    &quot;result&quot;: {\n        &quot;success&quot;: true,\n        &quot;txid&quot;: &quot;&lt;hash&gt;&quot;\n    }\n}\n\nError Response:\n{\n    &quot;jsonrpc&quot;: &quot;2.0&quot;,\n    &quot;id&quot;: &lt;request_id&gt;,\n    &quot;error&quot;: {\n        &quot;code&quot;: -32600,\n        &quot;message&quot;: &quot;&lt;error_message&gt;&quot;\n    }\n}\n\n\nUsage Example:\n{\n    &quot;jsonrpc&quot;: &quot;2.0&quot;,\n    &quot;method&quot;: &quot;lib_send_transaction&quot;,\n    &quot;params&quot;: [&quot;{\\&quot;to\\&quot;: \\&quot;0x1234...\\&quot;, \\&quot;value\\&quot;: \\&quot;100\\&quot;}&quot;],\n    &quot;id&quot;: 1\n}\nFor more detailed on transaction object, please refer to Transactions.\n\nlib_get_transaction_receipt\nDescription:\nRetrieves the receipt of a specific transaction.\nParameters:\n\nparams: An array containing the transaction id as a string on the first index.\n\nReturns:\n\nSuccess Response:\n{\n    &quot;jsonrpc&quot;: &quot;2.0&quot;,\n    &quot;id&quot;: &lt;request_id&gt;,\n    &quot;result&quot;: {\n      ...\n    }\n}\n\nError Response:\n{\n    &quot;jsonrpc&quot;: &quot;2.0&quot;,\n    &quot;id&quot;: &lt;request_id&gt;,\n    &quot;error&quot;: {\n        &quot;code&quot;: -32600,\n        &quot;message&quot;: &quot;&lt;error_message&gt;&quot;\n    }\n}\n\n\nUsage Example:\n{\n    &quot;jsonrpc&quot;: &quot;2.0&quot;,\n    &quot;method&quot;: &quot;lib_get_transaction_receipt&quot;,\n    &quot;params&quot;: [&quot;0xdeadbeef...32byte&quot;],\n    &quot;id&quot;: 1\n}\n\nlib_get_transaction_history\nDescription:\nFetches the transaction history for a specific account.\nParameters:\n\nparams: An array containing the account ID as a string on the first index. (32bytes) padded shardus address.\n\nReturns:\n\nSuccess Response:\n{\n    &quot;jsonrpc&quot;: &quot;2.0&quot;,\n    &quot;id&quot;: &lt;request_id&gt;,\n    &quot;result&quot;: [\n          {},\n          {},\n          ...\n    ]\n}\n\nError Response:\n{\n    &quot;jsonrpc&quot;: &quot;2.0&quot;,\n    &quot;id&quot;: &lt;request_id&gt;,\n    &quot;error&quot;: {\n        &quot;code&quot;: -32600,\n        &quot;message&quot;: &quot;&lt;error_message&gt;&quot;\n    }\n}\n\n\nUsage Example:\n{\n    &quot;jsonrpc&quot;: &quot;2.0&quot;,\n    &quot;method&quot;: &quot;lib_get_transaction_history&quot;,\n    &quot;params&quot;: [&quot;0xaccount123&quot;],\n    &quot;id&quot;: 1\n}\n\nlib_get_account\nDescription:\nRetrieves account details for a specific address.\nParameters:\n\nparams: An array containing the account address as a string.\n\nReturns:\n\nSuccess Response:\n{\n    &quot;jsonrpc&quot;: &quot;2.0&quot;,\n    &quot;id&quot;: &lt;request_id&gt;,\n    &quot;result&quot;: {\n      &lt;Account Object&gt;\n    }\n}\n\nError Response:\n{\n    &quot;jsonrpc&quot;: &quot;2.0&quot;,\n    &quot;id&quot;: &lt;request_id&gt;,\n    &quot;error&quot;: {\n        &quot;code&quot;: -32600,\n        &quot;message&quot;: &quot;&lt;error_message&gt;&quot;\n    }\n}\n\n\nUsage Example:\n{\n    &quot;jsonrpc&quot;: &quot;2.0&quot;,\n    &quot;method&quot;: &quot;lib_get_account&quot;,\n    &quot;params&quot;: [&quot;0xaddress123&quot;],\n    &quot;id&quot;: 1\n}\n\nlib_get_messages\nDescription:\nRetrieves chat messages for a specific chat ID.\nParameters:\n\nparams: An array containing the chat ID as a string. Chat id is blake2 hash of a sorted joint string of two account address alphabetically.\n\nReturns:\n\nSuccess Response:\n{\n    &quot;jsonrpc&quot;: &quot;2.0&quot;,\n    &quot;id&quot;: &lt;request_id&gt;,\n    &quot;result&quot;: [\n      &lt;Message Object&gt;,\n        ...\n    ]\n}\n\nError Response:\n{\n    &quot;jsonrpc&quot;: &quot;2.0&quot;,\n    &quot;id&quot;: &lt;request_id&gt;,\n    &quot;error&quot;: {\n        &quot;code&quot;: -32600,\n        &quot;message&quot;: &quot;&lt;error_message&gt;&quot;\n    }\n}\n\n\nUsage Example:\n{\n    &quot;jsonrpc&quot;: &quot;2.0&quot;,\n    &quot;method&quot;: &quot;lib_get_messages&quot;,\n    &quot;params&quot;: [&quot;chatroom123&quot;],\n    &quot;id&quot;: 1\n}\n\nlib_subscribe\nDescription:\nSubscribes to a chat room for updates.\nParameters:\n\nparams: An array containing the chat ID as a string. Chat id is blake2 hash of a sorted joint string of two account address alphabetically.\nRequires a WebSocket connection.\n\nReturns:\n\nSuccess Response:\n{\n    &quot;jsonrpc&quot;: &quot;2.0&quot;,\n    &quot;id&quot;: &lt;request_id&gt;,\n    &quot;result&quot;: &quot;&lt;subscription_id&gt;&quot;\n}\n\nError Response:\n{\n    &quot;jsonrpc&quot;: &quot;2.0&quot;,\n    &quot;id&quot;: &lt;request_id&gt;,\n    &quot;error&quot;: {\n        &quot;code&quot;: -32600,\n        &quot;message&quot;: &quot;&lt;error_message&gt;&quot;\n    }\n}\n\n\nUsage Example:\n{\n    &quot;jsonrpc&quot;: &quot;2.0&quot;,\n    &quot;method&quot;: &quot;lib_subscribe&quot;,\n    &quot;params&quot;: [&quot;0xfefe....&quot;],\n    &quot;id&quot;: 1\n}\n\nlib_unsubscribe\nDescription:\nUnsubscribes from a chat room.\nParameters:\n\nparams: An array containing the subscription ID as a string.\n\nReturns:\n\nSuccess Response:\n{\n    &quot;jsonrpc&quot;: &quot;2.0&quot;,\n    &quot;id&quot;: &lt;request_id&gt;,\n    &quot;result&quot;: true\n}\n\nError Response:\n{\n    &quot;jsonrpc&quot;: &quot;2.0&quot;,\n    &quot;id&quot;: &lt;request_id&gt;,\n    &quot;error&quot;: {\n        &quot;code&quot;: -32600,\n        &quot;message&quot;: &quot;&lt;error_message&gt;&quot;\n    }\n}\n\n\nUsage Example:\n{\n    &quot;jsonrpc&quot;: &quot;2.0&quot;,\n    &quot;method&quot;: &quot;lib_unsubscribe&quot;,\n    &quot;params&quot;: [&quot;subscription123&quot;],\n    &quot;id&quot;: 1\n}"},"rpc/index":{"title":"index","links":["rpc/api"],"tags":[],"content":"RPC\nLiberdus rpc provided RPC-ed interface for interacting with liberdus network for clients. The primary role of rpc is to distribute traffic accorss all the consensor. Rpc also aid in mitigating stress act upon validator for querying chain data such as transaction receipt and account balances from validator nodes by data distribution protocol’s collector. Although it will prefer data from collector server, rpc will fallback towards validator nodes. Rpc also provide websocket chat room subscription for new messages.\nIf what you’re looking for is a pure proxy server that route traffic to the one of the validator, you can use liberdus-proxy instead.\nContent\n\nRPC API Usage\nInternal Documentation\n"}}