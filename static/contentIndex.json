{"getting_started":{"title":"getting_started","links":[],"tags":[],"content":"Overview\nDuring the time contributing to the liberdus project, creating a local network is a great way to test your changes and see how they affect the network. This guide will walk you through the process of setting up a local network and launching it.\nLiberdus network is built on top of shardus protocol which is framework for building sharded and decentralized apps. The primary library @shardus/core is powered by rust binded networking protocol.\nPrerequisites\nMake sure you system has the following installed:\n\nRust\nNode.js\nPython3\n\nThe exact version of nodejs version required can be oberseved in liberdus/server’s package.json file.\nCloning the repositories\nFirst, clone the liberdus repository to your local machine. You can do this by running the following command:\ngit clone github.com/Liberdus/server.git\nPlease use dev branch for the latest changes.\ngit checkout dev\nOnce the repository is cloned, navigate to the repo directory and install the dependencies by running:\ncd server\nnpm install\nTo launch a local network, shardus provide a process manager that allow you to launch multiple network along with an archiver and monitoring system to form a working network. Install the shardus cli tool by running:\nnpm install -g shardus\nLaunching the network\nTo launch a local network, you can use the shardus cli tool. The following command will launch a network with 10 validator node, archiver node and a monitor server.\nshardus create-net 10\nAfter creating the network, you can observe the network status by visiting http://localhost:3000.\nLaunching the rpc server\nClone the rpc server repository to your local machine. You can do this by running the following command:\ngit clone git@github.com:Liberdus/liberdus-rpc.git\nOnce the repository is cloned, navigate to the repo directory and install the dependencies by running:\ncd liberdus-rpc\nrustup install 1.81\nrustup default 1.81\nTo launch the server, run the following command:\ncargo run\nRPC server will be running on http://localhost:8545.\nLaunching the liberdus demo client\nIn order to interact with the network, you can use the liberdus demo client. Clone the repository to your local machine by running the following command:\ngit clone github.com/Liberdus/liberdus-web-client.git\nTo run the vue project\ncd liberdus-web-client\nnpm install\nnpm run serve"},"index":{"title":"index","links":["getting_started","rpc/rpc"],"tags":[],"content":"Welcome contributors!\nThis documentation site is dedicated for contributing changes to liberdus network tech stack itself. Here are some useful links to get you started:\n\nGetting Started\nRPC\n"},"liberdus/accounts":{"title":"accounts","links":[],"tags":[],"content":"accounts.md\nThis document details the account types used in the Liberdus system.\n1. UserAccount\n\nDescription: Represents a user’s account.\nStructure:\n{\n  &quot;id&quot;: string,\n  &quot;type&quot;: &quot;UserAccount&quot;,\n  &quot;data&quot;: {\n    &quot;balance&quot;: bigint,\n    &quot;toll&quot;: bigint | null,\n    &quot;chats&quot;: object,\n    &quot;friends&quot;: object,\n    &quot;stake&quot;: bigint | null,\n    &quot;remove_stake_request&quot;: number | null,\n    &quot;payments&quot;: DeveloperPayment[]\n  },\n  &quot;alias&quot;: string | null,\n  &quot;emailHash&quot;: string | null,\n  &quot;verified&quot;: boolean | string,\n  &quot;lastMaintenance&quot;: number,\n  &quot;claimedSnapshot&quot;: boolean,\n  &quot;timestamp&quot;: number,\n  &quot;hash&quot;: string,\n  &quot;operatorAccountInfo&quot;: OperatorAccountInfo | null, // For operator accounts\n  &quot;publicKey&quot;: string\n}\n\nFields:  id: Account ID (32-byte hexadecimal string). data: Contains balance, toll, chat data, friend list, stake information, remove stake requests and payments received. alias: User’s registered alias (optional). emailHash: Hash of the user’s email. verified: Email verification status. lastMaintenance: Timestamp of last maintenance. claimedSnapshot: Snapshot claim status. timestamp: Last update timestamp. hash: Account hash. operatorAccountInfo: Information specific to operator accounts (stake, nominee, etc.). publicKey: Public key of the account\n\n2. OperatorAccountInfo (Nested within UserAccount)\n\nDescription: Contains additional information for operator accounts (users who operate nodes).\nStructure:\n{\n  &quot;stake&quot;: bigint,\n  &quot;nominee&quot;: string,\n  &quot;certExp&quot;: number,\n  &quot;operatorStats&quot;: OperatorStats\n}\n\nFields: stake: Amount of tokens staked. nominee: Node account the operator is staking to. certExp: Stake certificate expiration timestamp. operatorStats: Operator performance statistics.\n\n3. OperatorStats (Nested within OperatorAccountInfo)\n\nDescription: Stores operator statistics.\nStructure:\n{\n  &quot;totalNodeReward&quot;: bigint,\n  &quot;totalNodePenalty&quot;: bigint,\n  &quot;totalNodeTime&quot;: number,\n  &quot;history&quot;: { &quot;b&quot;: number, &quot;e&quot;: number }[],\n  &quot;totalUnstakeReward&quot;: bigint,\n  &quot;unstakeCount&quot;: number,\n  &quot;lastStakedNodeKey&quot;: string\n}\n\nFields: totalNodeReward: Total node rewards. totalNodePenalty: Total node penalties. totalNodeTime: Total node uptime. history: Uptime intervals. totalUnstakeReward: Total unstake rewards\n"},"liberdus/transactions":{"title":"transactions","links":[],"tags":[],"content":"This document details all transaction types in the Liberdus codebase, outlining their structure, data types, and validation rules.  All amounts are represented as bigint, and from and to fields represent 32-byte hexadecimal addresses.  Timestamps are in milliseconds since the epoch. Signatures are hashes of the transaction data.\n1. init_network\n\nDescription: Initializes the Liberdus network.  This transaction is typically only used once at the network’s genesis.\nStructure:\n{\n  &quot;type&quot;: &quot;init_network&quot;,\n  &quot;timestamp&quot;: number,\n  &quot;sign&quot;: {\n    &quot;owner&quot;: string,\n    &quot;sig&quot;: string\n  }\n}\n\nValidation:  validate checks if the transaction is targeting the network account (config.networkAccount).\nAccount Types Involved: NetworkAccount (created if it doesn’t exist)\n\n2. network_windows\n\nDescription: Sets the time windows for various stages of the Liberdus DAO process (proposal, voting, grace, apply).  Executed by a randomly selected node.\nStructure:\n{\n  &quot;type&quot;: &quot;network_windows&quot;,\n  &quot;timestamp&quot;: number,\n  &quot;from&quot;: string, // Node address\n  &quot;nodeId&quot;: string, // Node ID\n  &quot;sign&quot;: {\n    &quot;owner&quot;: string,\n    &quot;sig&quot;: string\n  }\n}\n\nValidation: validate checks if the transaction is targeting the network account.\nAccount Types Involved: NetworkAccount (updates windows)\n\n3. snapshot\n\nDescription: Creates a snapshot of the network state.\nStructure:\n{\n  &quot;type&quot;: &quot;snapshot&quot;,\n  &quot;timestamp&quot;: number,\n  &quot;from&quot;: string,\n  &quot;snapshot&quot;: object,\n  &quot;sign&quot;: {\n    &quot;owner&quot;: string,\n    &quot;sig&quot;: string\n  }\n}\n\nValidation: Verifies the signature.\nAccount Types Involved: NetworkAccount (updates snapshot field)\n\n4. email\n\nDescription: Sends a verification email.  Verification number is generated, and a gossip_email_hash transaction is created.\nStructure:\n{\n  &quot;type&quot;: &quot;email&quot;,\n  &quot;timestamp&quot;: number,\n  &quot;signedTx&quot;: {\n    &quot;emailHash&quot;: string,\n    &quot;from&quot;: string,\n    &quot;sign&quot;: {\n      &quot;owner&quot;: string,\n      &quot;sig&quot;: string\n    }\n  },\n  &quot;email&quot;: string,\n  &quot;sign&quot;: {\n    &quot;owner&quot;: string,\n    &quot;sig&quot;: string\n  }\n}\n\nValidation: Verifies both the outer and inner signatures, and checks email hash consistency.\nAccount Types Involved: UserAccount (updates emailHash), may create a GossipEmailHash entry\n\n5. gossip_email_hash\n\nDescription: Used internally to propagate email hashes.\nStructure:\n{\n  &quot;type&quot;: &quot;gossip_email_hash&quot;,\n  &quot;timestamp&quot;: number,\n  &quot;nodeId&quot;: string,\n  &quot;account&quot;: string,\n  &quot;from&quot;: string,\n  &quot;emailHash&quot;: string,\n  &quot;verified&quot;: string,\n  &quot;sign&quot;: {\n    &quot;owner&quot;: string,\n    &quot;sig&quot;: string\n  }\n}\n\nValidation: Verifies the signature.\nAccount Types Involved: UserAccount (updates emailHash, verified)\n\n6. verify\n\nDescription: Verifies an email address using a verification code.\nStructure:\n{\n  &quot;type&quot;: &quot;verify&quot;,\n  &quot;timestamp&quot;: number,\n  &quot;from&quot;: string,\n  &quot;code&quot;: string,\n  &quot;sign&quot;: {\n    &quot;owner&quot;: string,\n    &quot;sig&quot;: string\n  }\n}\n\nValidation: Verifies the signature and checks if the hash of the provided code matches the stored verification hash.\nAccount Types Involved: UserAccount (updates verified, adds faucet funds)\n\n7. register\n\nDescription: Registers an alias for a user account.\nStructure:\n{\n  &quot;type&quot;: &quot;register&quot;,\n  &quot;timestamp&quot;: number,\n  &quot;aliasHash&quot;: string,\n  &quot;from&quot;: string,\n  &quot;alias&quot;: string,\n  &quot;publicKey&quot;: string,\n  &quot;sign&quot;: {\n    &quot;owner&quot;: string,\n    &quot;sig&quot;: string\n  }\n}\n\nValidation: Verifies the signature, checks if the alias is already taken, validates alias format (alphanumeric only, max length), and checks if the aliasHash matches the hash of the provided alias.  Also validates public key format.\nAccount Types Involved: UserAccount (updates alias, publicKey), AliasAccount (updates inbox, address)\n\n8. create\n\nDescription: Creates a new user account with a given initial balance.\nStructure:\n{\n  &quot;type&quot;: &quot;create&quot;,\n  &quot;timestamp&quot;: number,\n  &quot;from&quot;: string,\n  &quot;to&quot;: string,\n  &quot;amount&quot;: bigint,\n  &quot;sign&quot;: {\n    &quot;owner&quot;: string,\n    &quot;sig&quot;: string\n  }\n}\n\nValidation: Verifies the signature and checks if the amount is positive.\nAccount Types Involved: UserAccount (created if it doesn’t exist, updates balance)\n\n9. transfer\n\nDescription: Transfers tokens between user accounts.\nStructure:\n{\n  &quot;type&quot;: &quot;transfer&quot;,\n  &quot;timestamp&quot;: number,\n  &quot;from&quot;: string,\n  &quot;to&quot;: string,\n  &quot;amount&quot;: bigint,\n  &quot;memo&quot;: string, // Optional memo\n  &quot;sign&quot;: {\n    &quot;owner&quot;: string,\n    &quot;sig&quot;: string\n  }\n}\n\nValidation: Verifies the signature, checks if the sender has sufficient balance to cover the transaction fee and amount, and validates memo length if present.\nAccount Types Involved: UserAccount (updates balance for sender and receiver)\n\n10. distribute\n\nDescription: Distributes tokens to multiple recipients.\nStructure:\n{\n  &quot;type&quot;: &quot;distribute&quot;,\n  &quot;timestamp&quot;: number,\n  &quot;from&quot;: string,\n  &quot;recipients&quot;: string[],\n  &quot;amount&quot;: bigint,\n  &quot;sign&quot;: {\n    &quot;owner&quot;: string,\n    &quot;sig&quot;: string\n  }\n}\n\nValidation: Verifies the signature, checks if the sender has sufficient balance to cover the transaction fee and the total amount to be distributed.\nAccount Types Involved: UserAccount (updates balance for sender and all recipients)\n\n11. message\n\nDescription: Sends a message in a chat.\nStructure:\n{\n  &quot;type&quot;: &quot;message&quot;,\n  &quot;timestamp&quot;: number,\n  &quot;from&quot;: string,\n  &quot;to&quot;: string,\n  &quot;chatId&quot;: string,\n  &quot;message&quot;: string,\n  &quot;sign&quot;: {\n    &quot;owner&quot;: string,\n    &quot;sig&quot;: string\n  }\n}\n\nValidation: Verifies the signature, checks if the sender has sufficient balance to cover the transaction fee and any applicable toll, and validates message size.\nAccount Types Involved: UserAccount (updates chats, deducts toll/transaction fee), ChatAccount (adds message)\nNotes: The chatId field is a blake2 hash of the sorted sender and receiver addresses.\n\n12. toll\n\nDescription: Sets the toll amount for a user account.\nStructure:\n{\n  &quot;type&quot;: &quot;toll&quot;,\n  &quot;timestamp&quot;: number,\n  &quot;from&quot;: string,\n  &quot;toll&quot;: bigint,\n  &quot;sign&quot;: {\n    &quot;owner&quot;: string,\n    &quot;sig&quot;: string\n  }\n}\n\nValidation: Verifies the signature, checks if the sender has sufficient balance, and validates toll amount range (min 1, max 1,000,000).\nAccount Types Involved: UserAccount (updates toll)\n\n13. friend\n\nDescription: Adds a friend to a user account.\nStructure:\n{\n  &quot;type&quot;: &quot;friend&quot;,\n  &quot;timestamp&quot;: number,\n  &quot;alias&quot;: string,\n  &quot;from&quot;: string,\n  &quot;to&quot;: string,\n  &quot;sign&quot;: {\n    &quot;owner&quot;: string,\n    &quot;sig&quot;: string\n  }\n}\n\nValidation: Verifies the signature and checks if the sender has sufficient balance to cover transaction fee.\nAccount Types Involved: UserAccount (updates friends)\n\n14. remove_friend\n\nDescription: Removes a friend from a user account.\nStructure:\n{\n  &quot;type&quot;: &quot;remove_friend&quot;,\n  &quot;timestamp&quot;: number,\n  &quot;from&quot;: string,\n  &quot;to&quot;: string,\n  &quot;sign&quot;: {\n    &quot;owner&quot;: string,\n    &quot;sig&quot;: string\n  }\n}\n\nValidation: Verifies the signature.\nAccount Types Involved: UserAccount (updates friends)\n\n15. stake\n\nDescription: Stakes tokens to become a node.\nStructure:\n{\n  &quot;type&quot;: &quot;stake&quot;,\n  &quot;timestamp&quot;: number,\n  &quot;from&quot;: string,\n  &quot;stake&quot;: bigint,\n  &quot;sign&quot;: {\n    &quot;owner&quot;: string,\n    &quot;sig&quot;: string\n  }\n}\n\nValidation: Verifies the signature, checks if the sender has sufficient balance to cover the stake amount and transaction fee.\nAccount Types Involved: UserAccount (updates balance, stake)\n\n16. remove_stake\n\nDescription: Removes staked tokens.  Requires a prior remove_stake_request.\nStructure:\n{\n  &quot;type&quot;: &quot;remove_stake&quot;,\n  &quot;timestamp&quot;: number,\n  &quot;from&quot;: string,\n  &quot;stake&quot;: bigint,\n  &quot;sign&quot;: {\n    &quot;owner&quot;: string,\n    &quot;sig&quot;: string\n  }\n}\n\nValidation: Verifies the signature, checks if a remove_stake_request is active, and that sufficient stake exists.  Checks if stake amount does not exceed the required amount.\nAccount Types Involved: UserAccount (updates balance, stake, remove_stake_request)\n\n17. remove_stake_request\n\nDescription: Requests to remove staked tokens. This initiates a cooldown period before the stake can actually be removed.\nStructure:\n{\n  &quot;type&quot;: &quot;remove_stake_request&quot;,\n  &quot;timestamp&quot;: number,\n  &quot;from&quot;: string,\n  &quot;stake&quot;: bigint,\n  &quot;sign&quot;: {\n    &quot;owner&quot;: string,\n    &quot;sig&quot;: string\n  }\n}\n\nValidation: Verifies the signature and checks if the sender has sufficient stake.  Checks if stake amount does not exceed the required amount.\nAccount Types Involved: UserAccount (updates remove_stake_request)\n\n18. node_reward\n\nDescription: Rewards a node for its participation.\nStructure:\n{\n  &quot;type&quot;: &quot;node_reward&quot;,\n  &quot;timestamp&quot;: number,\n  &quot;nodeId&quot;: string,\n  &quot;from&quot;: string,\n  &quot;to&quot;: string,\n  &quot;sign&quot;: {\n    &quot;owner&quot;: string,\n    &quot;sig&quot;: string\n  }\n}\n\nValidation: Verifies the signature and checks if enough time has passed since the last reward for the node.\nAccount Types Involved: NodeAccount (updates balance, nodeRewardTime), UserAccount (receives reward if from and to differ)\n\n19. snapshot_claim\n\nDescription: Claims tokens from a snapshot.\nStructure:\n{\n  &quot;type&quot;: &quot;snapshot_claim&quot;,\n  &quot;timestamp&quot;: number,\n  &quot;from&quot;: string,\n  &quot;sign&quot;: {\n    &quot;owner&quot;: string,\n    &quot;sig&quot;: string\n  }\n}\n\nValidation: Verifies the signature, checks if a snapshot exists, the user is in it, and if the user has already claimed.\nAccount Types Involved: UserAccount (updates balance, claimedSnapshot), NetworkAccount (updates snapshot)\n\n20. issue\n\nDescription: Creates a new issue for governance proposals.\nStructure:\n{\n  &quot;type&quot;: &quot;issue&quot;,\n  &quot;timestamp&quot;: number,\n  &quot;nodeId&quot;: string,\n  &quot;from&quot;: string,\n  &quot;issue&quot;: string,\n  &quot;proposal&quot;: string,\n  &quot;sign&quot;: {\n    &quot;owner&quot;: string,\n    &quot;sig&quot;: string\n  }\n}\n\nValidation: Verifies the signature, checks if the issue is already active, and validates the issue and proposal hashes against current network state. Also checks timestamp against the proposal window.\nAccount Types Involved: IssueAccount (created if it doesn’t exist, updates various fields), ProposalAccount (created), NetworkAccount\n\n21. proposal\n\nDescription: Submits a governance proposal.\nStructure:\n{\n  &quot;type&quot;: &quot;proposal&quot;,\n  &quot;timestamp&quot;: number,\n  &quot;from&quot;: string,\n  &quot;proposal&quot;: string,\n  &quot;issue&quot;: string,\n  &quot;parameters&quot;: NetworkParameters,\n  &quot;sign&quot;: {\n    &quot;owner&quot;: string,\n    &quot;sig&quot;: string\n  }\n}\n\nValidation: Verifies the signature, checks if the sender has sufficient funds, validates the proposal hash, and validates network parameters.  Checks if the proposal is within the proposal window.\nAccount Types Involved: UserAccount (deducts fees), ProposalAccount (created if it doesn’t exist), IssueAccount\n\n22. vote\n\nDescription: Casts a vote on a proposal.\nStructure:\n{\n  &quot;type&quot;: &quot;vote&quot;,\n  &quot;timestamp&quot;: number,\n  &quot;from&quot;: string,\n  &quot;issue&quot;: string,\n  &quot;proposal&quot;: string,\n  &quot;amount&quot;: bigint,\n  &quot;sign&quot;: {\n    &quot;owner&quot;: string,\n    &quot;sig&quot;: string\n  }\n}\n\nValidation: Verifies the signature, checks if the sender has sufficient balance, validates the issue and proposal IDs, and checks the vote timestamp against the voting window.\nAccount Types Involved: UserAccount (deducts tokens), ProposalAccount (updates power, totalVotes)\n\n23. tally\n\nDescription: Tallies the votes for a given issue.\nStructure:\n{\n  &quot;type&quot;: &quot;tally&quot;,\n  &quot;timestamp&quot;: number,\n  &quot;nodeId&quot;: string,\n  &quot;from&quot;: string,\n  &quot;issue&quot;: string,\n  &quot;proposals&quot;: string[],\n  &quot;sign&quot;: {\n    &quot;owner&quot;: string,\n    &quot;sig&quot;: string\n  }\n}\n\nValidation: Verifies the signature, checks if the issue is active, and validates the number of proposals against the issue’s proposalCount. Checks if the tally is within the grace window.\nAccount Types Involved: IssueAccount (updates tallied, winnerId), ProposalAccount (updates winner)\n\n24. apply_tally\n\nDescription: Applies the results of a tally (winning parameters).\nStructure:\n{\n  &quot;type&quot;: &quot;apply_tally&quot;,\n  &quot;timestamp&quot;: number,\n  &quot;next&quot;: NetworkParameters,\n  &quot;nextWindows&quot;: Windows,\n  &quot;sign&quot;: {\n    &quot;owner&quot;: string,\n    &quot;sig&quot;: string\n  }\n}\n\nValidation: Verifies the signature and checks the integrity of next and nextWindows fields.\nAccount Types Involved: NetworkAccount (updates current, windows, next, nextWindows)\n\n25. parameters\n\nDescription: Submits a transaction to finalize and apply the result of the tally for issue.\nStructure:\n{\n  &quot;type&quot;: &quot;parameters&quot;,\n  &quot;timestamp&quot;: number,\n  &quot;nodeId&quot;: string,\n  &quot;from&quot;: string,\n  &quot;issue&quot;: string,\n  &quot;sign&quot;: {\n    &quot;owner&quot;: string,\n    &quot;sig&quot;: string\n  }\n}\n\nValidation: Verifies the signature and checks if the transaction is within the apply window.\nAccount Types Involved: IssueAccount (updates active), NetworkAccount\n\n26. apply_parameters\n\nDescription: Applies new network parameters.\nStructure:\n{\n  &quot;type&quot;: &quot;apply_parameters&quot;,\n  &quot;timestamp&quot;: number,\n  &quot;current&quot;: NetworkParameters,\n  &quot;next&quot;: {},\n  &quot;windows&quot;: Windows,\n  &quot;nextWindows&quot;: {},\n  &quot;issue&quot;: number,\n  &quot;devWindows&quot;: DevWindows, //optional\n  &quot;nextDevWindows&quot;: DevWindows, //optional\n  &quot;sign&quot;: {\n    &quot;owner&quot;: string,\n    &quot;sig&quot;: string\n  }\n}\n\nValidation: Verifies the signature and checks the structure and values of various fields.\nAccount Types Involved: NetworkAccount (updates current, next, windows, nextWindows, issue, devWindows, nextDevWindows)\n\n27. dev_issue\n\nDescription: Creates a new developer funding issue.\nStructure:\n{\n  &quot;type&quot;: &quot;dev_issue&quot;,\n  &quot;timestamp&quot;: number,\n  &quot;nodeId&quot;: string,\n  &quot;from&quot;: string,\n  &quot;devIssue&quot;: string,\n  &quot;sign&quot;: {\n    &quot;owner&quot;: string,\n    &quot;sig&quot;: string\n  }\n}\n\nValidation: Verifies the signature, checks if devIssue is already active, and validates the devIssue address against the network state. Also validates timestamp against the devProposal window.\nAccount Types Involved: DevIssueAccount (created if it doesn’t exist), NetworkAccount\n\n28. dev_proposal\n\nDescription: Submits a developer funding proposal.\nStructure:\n{\n  &quot;type&quot;: &quot;dev_proposal&quot;,\n  &quot;timestamp&quot;: number,\n  &quot;from&quot;: string,\n  &quot;devProposal&quot;: string,\n  &quot;devIssue&quot;: string,\n  &quot;totalAmount&quot;: bigint,\n  &quot;payments&quot;: DeveloperPayment[],\n  &quot;title&quot;: string,\n  &quot;description&quot;: string,\n  &quot;payAddress&quot;: string,\n  &quot;sign&quot;: {\n    &quot;owner&quot;: string,\n    &quot;sig&quot;: string\n  }\n}\n\nValidation: Verifies the signature, checks if sender has enough balance, validates proposal hash and fields(title, description, payAddress, payments).  Checks the proposal against the devProposal window.\nAccount Types Involved: UserAccount (deducts fees), DevProposalAccount (created), DevIssueAccount\n\n29. dev_vote\n\nDescription: Casts a vote on a developer funding proposal.\nStructure:\n{\n  &quot;type&quot;: &quot;dev_vote&quot;,\n  &quot;timestamp&quot;: number,\n  &quot;from&quot;: string,\n  &quot;devIssue&quot;: string,\n  &quot;devProposal&quot;: string,\n  &quot;approve&quot;: boolean,\n  &quot;amount&quot;: bigint,\n  &quot;sign&quot;: {\n    &quot;owner&quot;: string,\n    &quot;sig&quot;: string\n  }\n}\n\nValidation: Verifies the signature, checks if the sender has sufficient balance, validates the devIssue and devProposal IDs, and checks the vote timestamp against the devVoting window.\nAccount Types Involved: UserAccount (deducts tokens), DevProposalAccount (updates approve, reject, totalVotes)\n\n30. dev_tally\n\nDescription: Tallies the votes for a developer funding issue.\nStructure:\n{\n  &quot;type&quot;: &quot;dev_tally&quot;,\n  &quot;timestamp&quot;: number,\n  &quot;nodeId&quot;: string,\n  &quot;from&quot;: string,\n  &quot;devIssue&quot;: string,\n  &quot;devProposals&quot;: string[],\n  &quot;sign&quot;: {\n    &quot;owner&quot;: string,\n    &quot;sig&quot;: string\n  }\n}\n\nValidation: Verifies the signature, checks if the devIssue is active, and validates the number of devProposals against the devIssue’s devProposalCount. Checks the tally timestamp against the devGrace window.\nAccount Types Involved: DevIssueAccount (updates tallied, winners), DevProposalAccount (updates approved)\n\n31. apply_dev_tally\n\nDescription: Applies the results of a developer funding tally.\nStructure:\n{\n  &quot;type&quot;: &quot;apply_dev_tally&quot;,\n  &quot;timestamp&quot;: number,\n  &quot;nextDeveloperFund&quot;: DeveloperPayment[],\n  &quot;nextDevWindows&quot;: DevWindows,\n  &quot;sign&quot;: {\n    &quot;owner&quot;: string,\n    &quot;sig&quot;: string\n  }\n}\n\nValidation: Verifies the signature and checks the integrity of nextDeveloperFund and nextDevWindows.\nAccount Types Involved: NetworkAccount (updates developerFund, devWindows, nextDevWindows, devIssue)\n\n32. dev_parameters\n\nDescription: Transaction to finalize and apply the result of the tally for devIssue.\nStructure:\n{\n  &quot;type&quot;: &quot;dev_parameters&quot;,\n  &quot;timestamp&quot;: number,\n  &quot;nodeId&quot;: string,\n  &quot;from&quot;: string,\n  &quot;devIssue&quot;: string,\n  &quot;sign&quot;: {\n    &quot;owner&quot;: string,\n    &quot;sig&quot;: string\n  }\n}\n\nValidation: Verifies the signature and checks if the transaction is within the devApply window.\nAccount Types Involved: DevIssueAccount (updates active), NetworkAccount\n\n33. apply_dev_parameters\n\nDescription: Applies the winning developer funding parameters.\nStructure:\n{\n  &quot;type&quot;: &quot;apply_dev_parameters&quot;,\n  &quot;timestamp&quot;: number,\n  &quot;devWindows&quot;: DevWindows,\n  &quot;nextDevWindows&quot;: {},\n  &quot;developerFund&quot;: DeveloperPayment[],\n  &quot;nextDeveloperFund&quot;: DeveloperPayment[],\n  &quot;devIssue&quot;: number,\n  &quot;sign&quot;: {\n    &quot;owner&quot;: string,\n    &quot;sig&quot;: string\n  }\n}\n\nValidation: Verifies the signature and checks the integrity of devWindows, developerFund, and other fields.\nAccount Types Involved: NetworkAccount (updates devWindows, nextDevWindows, developerFund, nextDeveloperFund, devIssue)\n\n34. developer_payment\n\nDescription: Releases funds to a developer.\nStructure:\n{\n  &quot;type&quot;: &quot;developer_payment&quot;,\n  &quot;timestamp&quot;: number,\n  &quot;nodeId&quot;: string,\n  &quot;from&quot;: string,\n  &quot;developer&quot;: string,\n  &quot;payment&quot;: DeveloperPayment,\n  &quot;sign&quot;: {\n    &quot;owner&quot;: string,\n    &quot;sig&quot;: string\n  }\n}\n\nValidation: Verifies the signature, checks if payment exists, matches developer, and is ready to be released.\nAccount Types Involved: UserAccount (updates balance, payments), NodeAccount, NetworkAccount\n\n35. apply_developer_payment\n\nDescription: Applies a developer payment.\nStructure:\n{\n  &quot;type&quot;: &quot;apply_developer_payment&quot;,\n  &quot;timestamp&quot;: number,\n  &quot;developerFund&quot;: DeveloperPayment[],\n  &quot;sign&quot;: {\n    &quot;owner&quot;: string,\n    &quot;sig&quot;: string\n  }\n}\n\nValidation: Verifies the signature and checks the structure of developerFund.\nAccount Types Involved: NetworkAccount (updates developerFund)\n\n36. change_config\n\nDescription: Proposes a change to the Liberdus network configuration.\nStructure:\n{\n  &quot;type&quot;: &quot;change_config&quot;,\n  &quot;timestamp&quot;: number,\n  &quot;from&quot;: string,\n  &quot;cycle&quot;: number,\n  &quot;config&quot;: string,\n  &quot;sign&quot;: {\n    &quot;owner&quot;: string,\n    &quot;sig&quot;: string\n  }\n}\n\nValidation: Verifies the signature, checks the format of from, cycle, and config fields (valid JSON).\nAccount Types Involved: UserAccount, NetworkAccount (indirectly through apply_change_config)\n\n37. apply_change_config\n\nDescription: Applies a configuration change to the network.\nStructure:\n{\n  &quot;type&quot;: &quot;apply_change_config&quot;,\n  &quot;timestamp&quot;: number,\n  &quot;change&quot;: object,\n  &quot;sign&quot;: {\n    &quot;owner&quot;: string,\n    &quot;sig&quot;: string\n  }\n}\n\nValidation: Verifies the signature.\nAccount Types Involved: NetworkAccount (updates listOfChanges)\n\n38. change_network_param\n\nDescription: Proposes a change to Liberdus network parameters.\nStructure:\n{\n  &quot;type&quot;: &quot;change_network_param&quot;,\n  &quot;timestamp&quot;: number,\n  &quot;from&quot;: string,\n  &quot;cycle&quot;: number,\n  &quot;config&quot;: string,\n  &quot;sign&quot;: {\n    &quot;owner&quot;: string,\n    &quot;sig&quot;: string\n  }\n}\n\nValidation: Verifies the signature, checks the format of from, cycle, and config fields (valid JSON).\nAccount Types Involved: UserAccount, NetworkAccount (indirectly through apply_change_network_param)\n\n39. apply_change_network_param\n\nDescription: Applies a change to network parameters.\nStructure:\n{\n  &quot;type&quot;: &quot;apply_change_network_param&quot;,\n  &quot;timestamp&quot;: number,\n  &quot;change&quot;: object,\n  &quot;sign&quot;: {\n    &quot;owner&quot;: string,\n    &quot;sig&quot;: string\n  }\n}\n\nValidation: Verifies the signature.\nAccount Types Involved: NetworkAccount (updates listOfChanges)\n\n40. deposit_stake\n\nDescription: Deposits stake to a node.\nStructure:\n{\n  &quot;type&quot;: &quot;deposit_stake&quot;,\n  &quot;timestamp&quot;: number,\n  &quot;nominee&quot;: string,\n  &quot;nominator&quot;: string,\n  &quot;stake&quot;: bigint,\n  &quot;sign&quot;: {\n    &quot;owner&quot;: string,\n    &quot;sig&quot;: string\n  }\n}\n\nValidation: Verifies the signature, checks nominator and nominee account states, ensures the amount is positive and sufficient, checks against restake cooldown, and validates addresses.\nAccount Types Involved: UserAccount (updates balance), NodeAccount (updates stakeLock, nominator, stakeTimestamp)\n\n41. withdraw_stake\n\nDescription: Withdraws stake from a node.\nStructure:\n{\n  &quot;type&quot;: &quot;withdraw_stake&quot;,\n  &quot;timestamp&quot;: number,\n  &quot;nominee&quot;: string,\n  &quot;nominator&quot;: string,\n  &quot;force&quot;: boolean,\n  &quot;sign&quot;: {\n    &quot;owner&quot;: string,\n    &quot;sig&quot;: string\n  }\n}\n\nValidation: Verifies the signature, checks nominator and nominee account states, and validates addresses.  Checks if the node is active, in the standby list or has ended its reward period.\nAccount Types Involved: UserAccount (updates balance), NodeAccount (updates stakeLock, nominator, rewardEndTime)\n\n42. set_cert_time\n\nDescription: Sets the expiration time for a node’s stake certificate.\nStructure:\n{\n  &quot;type&quot;: &quot;set_cert_time&quot;,\n  &quot;timestamp&quot;: number,\n  &quot;nominee&quot;: string,\n  &quot;nominator&quot;: string,\n  &quot;duration&quot;: number,\n  &quot;sign&quot;: {\n    &quot;owner&quot;: string,\n    &quot;sig&quot;: string\n  }\n}\n\nValidation: Verifies the signature, validates addresses and ensures the duration is within allowed limits. Checks if the nominator has enough stake to satisfy minimum stake requirements.\nAccount Types Involved: UserAccount (updates operatorAccountInfo.certExp),  NodeAccount\n\n43. query_certificate\n\nDescription: Queries for a stake certificate.\nStructure:\n{\n  &quot;type&quot;: &quot;query_certificate&quot;,\n  &quot;nominee&quot;: string,\n  &quot;nominator&quot;: string,\n  &quot;sign&quot;: {\n    &quot;owner&quot;: string,\n    &quot;sig&quot;: string\n  }\n}\n\nValidation: Verifies the signature and address.\nAccount Types Involved: UserAccount, NodeAccount (indirectly)\n\n44. init_reward\n\nDescription: Initializes a node’s reward calculation.\nStructure:\n{\n  &quot;type&quot;: &quot;init_reward&quot;,\n  &quot;timestamp&quot;: number,\n  &quot;nominee&quot;: string,\n  &quot;nodeActivatedTime&quot;: number,\n  &quot;sign&quot;: {\n    &quot;owner&quot;: string,\n    &quot;sig&quot;: string\n  }\n}\n\nValidation: Verifies the signature and checks the validity of nodeActivatedTime.\nAccount Types Involved: NodeAccount (updates rewardStartTime)\n\n45. claim_reward\n\nDescription: Claims a node’s reward.\nStructure:\n{\n  &quot;type&quot;: &quot;claim_reward&quot;,\n  &quot;timestamp&quot;: number,\n  &quot;nominee&quot;: string,\n  &quot;nominator&quot;: string,\n  &quot;deactivatedNodeId&quot;: string,\n  &quot;nodeDeactivatedTime&quot;: number,\n  &quot;cycle&quot;: number, //added in 1.11.0\n  &quot;sign&quot;: {\n    &quot;owner&quot;: string,\n    &quot;sig&quot;: string\n  }\n}\n\nValidation: Verifies the signature, checks the validity of nodeDeactivatedTime, verifies that the node is not active.\nAccount Types Involved: NodeAccount (updates rewardEndTime, rewarded, reward), UserAccount (updates operatorAccountInfo)\n\n46. apply_penalty\n\nDescription: Applies a penalty to a node.\nStructure:\n{\n  &quot;type&quot;: &quot;apply_penalty&quot;,\n  &quot;timestamp&quot;: number,\n  &quot;reportedNodeId&quot;: string,\n  &quot;reportedNodePublickKey&quot;: string,\n  &quot;nominator&quot;: string,\n  &quot;violationType&quot;: ViolationType,\n  &quot;violationData&quot;: LeftNetworkEarlyViolationData | SyncingTimeoutViolationData | NodeRefutedViolationData,\n  &quot;sign&quot;: {\n    &quot;owner&quot;: string,\n    &quot;sig&quot;: string\n  }\n}\n\nValidation: Verifies the signature, validates addresses and violation data, and checks for pre-existing penalties.\nAccount Types Involved: NodeAccount (updates penalty, stakeLock, nodeAccountStats), UserAccount (updates operatorAccountInfo)\n\n47. admin_certificate\n\nDescription: Used for administering the network, allowing certain privileged actions.\nStructure:\n{\n  &quot;type&quot;: &quot;admin_certificate&quot;,\n  &quot;nominee&quot;: string,\n  &quot;certCreation&quot;: number,\n  &quot;certExp&quot;: number,\n  &quot;sign&quot;: {\n    &quot;owner&quot;: string,\n    &quot;sig&quot;: string\n  },\n  &quot;goldenTicket&quot;: boolean\n}\n\nValidation: Verifies the signature, ensures the nominee is the public key of the node, and checks for authorized signing keys.\nAccount Types Involved: None directly, affects the network’s state and operations\n"},"rpc/api":{"title":"api","links":[],"tags":[],"content":"Liberdus RPC Documentation\nThis document describes the available RPC methods for interacting with the Liberdus backend. These methods allow developers to perform operations such as sending transactions, retrieving transaction receipts, managing subscriptions, and more.\n\nMethods Overview\n\nlib_send_transaction: Injects a transaction into the Liberdus system with retry logic.\nlib_get_transaction_receipt: Retrieves the receipt of a specific transaction.\nlib_get_transaction_history: Fetches the transaction history for a given account.\nlib_get_account: Fetches account details based on an address.\nlib_get_messages: Retrieves chat messages for a specific chat ID.\nlib_subscribe: Subscribes to a chat room for updates.\nlib_unsubscribe: Unsubscribes from a chat room.\n\n\nlib_send_transaction\nDescription:\nInjects a transaction into the Liberdus system with retry logic.\nParameters:\n\nparams: Stringified Transaction Object.\n\nReturns:\n\nSuccess Response:\n{\n    &quot;jsonrpc&quot;: &quot;2.0&quot;,\n    &quot;id&quot;: &lt;request_id&gt;,\n    &quot;result&quot;: {\n        &quot;success&quot;: true,\n        &quot;txid&quot;: &quot;&lt;hash&gt;&quot;\n    }\n}\n\nError Response:\n{\n    &quot;jsonrpc&quot;: &quot;2.0&quot;,\n    &quot;id&quot;: &lt;request_id&gt;,\n    &quot;error&quot;: {\n        &quot;code&quot;: -32600,\n        &quot;message&quot;: &quot;&lt;error_message&gt;&quot;\n    }\n}\n\n\nUsage Example:\n{\n    &quot;jsonrpc&quot;: &quot;2.0&quot;,\n    &quot;method&quot;: &quot;lib_send_transaction&quot;,\n    &quot;params&quot;: [&quot;{\\&quot;to\\&quot;: \\&quot;0x1234...\\&quot;, \\&quot;value\\&quot;: \\&quot;100\\&quot;}&quot;],\n    &quot;id&quot;: 1\n}\nFor more detailed on transaction object, please refer to Transactions.\n\nlib_get_transaction_receipt\nDescription:\nRetrieves the receipt of a specific transaction.\nParameters:\n\nparams: An array containing the transaction id as a string on the first index.\n\nReturns:\n\nSuccess Response:\n{\n    &quot;jsonrpc&quot;: &quot;2.0&quot;,\n    &quot;id&quot;: &lt;request_id&gt;,\n    &quot;result&quot;: {\n      ...\n    }\n}\n\nError Response:\n{\n    &quot;jsonrpc&quot;: &quot;2.0&quot;,\n    &quot;id&quot;: &lt;request_id&gt;,\n    &quot;error&quot;: {\n        &quot;code&quot;: -32600,\n        &quot;message&quot;: &quot;&lt;error_message&gt;&quot;\n    }\n}\n\n\nUsage Example:\n{\n    &quot;jsonrpc&quot;: &quot;2.0&quot;,\n    &quot;method&quot;: &quot;lib_get_transaction_receipt&quot;,\n    &quot;params&quot;: [&quot;0xdeadbeef...32byte&quot;],\n    &quot;id&quot;: 1\n}\n\nlib_get_transaction_history\nDescription:\nFetches the transaction history for a specific account.\nParameters:\n\nparams: An array containing the account ID as a string on the first index. (32bytes) padded shardus address.\n\nReturns:\n\nSuccess Response:\n{\n    &quot;jsonrpc&quot;: &quot;2.0&quot;,\n    &quot;id&quot;: &lt;request_id&gt;,\n    &quot;result&quot;: [\n          {},\n          {},\n          ...\n    ]\n}\n\nError Response:\n{\n    &quot;jsonrpc&quot;: &quot;2.0&quot;,\n    &quot;id&quot;: &lt;request_id&gt;,\n    &quot;error&quot;: {\n        &quot;code&quot;: -32600,\n        &quot;message&quot;: &quot;&lt;error_message&gt;&quot;\n    }\n}\n\n\nUsage Example:\n{\n    &quot;jsonrpc&quot;: &quot;2.0&quot;,\n    &quot;method&quot;: &quot;lib_get_transaction_history&quot;,\n    &quot;params&quot;: [&quot;0xaccount123&quot;],\n    &quot;id&quot;: 1\n}\n\nlib_get_account\nDescription:\nRetrieves account details for a specific address.\nParameters:\n\nparams: An array containing the account address as a string.\n\nReturns:\n\nSuccess Response:\n{\n    &quot;jsonrpc&quot;: &quot;2.0&quot;,\n    &quot;id&quot;: &lt;request_id&gt;,\n    &quot;result&quot;: {\n      &lt;Account Object&gt;\n    }\n}\n\nError Response:\n{\n    &quot;jsonrpc&quot;: &quot;2.0&quot;,\n    &quot;id&quot;: &lt;request_id&gt;,\n    &quot;error&quot;: {\n        &quot;code&quot;: -32600,\n        &quot;message&quot;: &quot;&lt;error_message&gt;&quot;\n    }\n}\n\n\nUsage Example:\n{\n    &quot;jsonrpc&quot;: &quot;2.0&quot;,\n    &quot;method&quot;: &quot;lib_get_account&quot;,\n    &quot;params&quot;: [&quot;0xaddress123&quot;],\n    &quot;id&quot;: 1\n}\n\nlib_get_messages\nDescription:\nRetrieves chat messages for a specific chat ID.\nParameters:\n\nparams: An array containing the chat ID as a string. Chat id is blake2 hash of a sorted joint string of two account address alphabetically.\n\nReturns:\n\nSuccess Response:\n{\n    &quot;jsonrpc&quot;: &quot;2.0&quot;,\n    &quot;id&quot;: &lt;request_id&gt;,\n    &quot;result&quot;: [\n      &lt;Message Object&gt;,\n        ...\n    ]\n}\n\nError Response:\n{\n    &quot;jsonrpc&quot;: &quot;2.0&quot;,\n    &quot;id&quot;: &lt;request_id&gt;,\n    &quot;error&quot;: {\n        &quot;code&quot;: -32600,\n        &quot;message&quot;: &quot;&lt;error_message&gt;&quot;\n    }\n}\n\n\nUsage Example:\n{\n    &quot;jsonrpc&quot;: &quot;2.0&quot;,\n    &quot;method&quot;: &quot;lib_get_messages&quot;,\n    &quot;params&quot;: [&quot;chatroom123&quot;],\n    &quot;id&quot;: 1\n}\n\nlib_subscribe\nDescription:\nSubscribes to a chat room for updates.\nParameters:\n\nparams: An array containing the chat ID as a string. Chat id is blake2 hash of a sorted joint string of two account address alphabetically.\nRequires a WebSocket connection.\n\nReturns:\n\nSuccess Response:\n{\n    &quot;jsonrpc&quot;: &quot;2.0&quot;,\n    &quot;id&quot;: &lt;request_id&gt;,\n    &quot;result&quot;: &quot;&lt;subscription_id&gt;&quot;\n}\n\nError Response:\n{\n    &quot;jsonrpc&quot;: &quot;2.0&quot;,\n    &quot;id&quot;: &lt;request_id&gt;,\n    &quot;error&quot;: {\n        &quot;code&quot;: -32600,\n        &quot;message&quot;: &quot;&lt;error_message&gt;&quot;\n    }\n}\n\n\nUsage Example:\n{\n    &quot;jsonrpc&quot;: &quot;2.0&quot;,\n    &quot;method&quot;: &quot;lib_subscribe&quot;,\n    &quot;params&quot;: [&quot;0xfefe....&quot;],\n    &quot;id&quot;: 1\n}\n\nlib_unsubscribe\nDescription:\nUnsubscribes from a chat room.\nParameters:\n\nparams: An array containing the subscription ID as a string.\n\nReturns:\n\nSuccess Response:\n{\n    &quot;jsonrpc&quot;: &quot;2.0&quot;,\n    &quot;id&quot;: &lt;request_id&gt;,\n    &quot;result&quot;: true\n}\n\nError Response:\n{\n    &quot;jsonrpc&quot;: &quot;2.0&quot;,\n    &quot;id&quot;: &lt;request_id&gt;,\n    &quot;error&quot;: {\n        &quot;code&quot;: -32600,\n        &quot;message&quot;: &quot;&lt;error_message&gt;&quot;\n    }\n}\n\n\nUsage Example:\n{\n    &quot;jsonrpc&quot;: &quot;2.0&quot;,\n    &quot;method&quot;: &quot;lib_unsubscribe&quot;,\n    &quot;params&quot;: [&quot;subscription123&quot;],\n    &quot;id&quot;: 1\n}"},"rpc/rpc":{"title":"rpc","links":["rpc/api"],"tags":[],"content":"RPC Overview\nLiberdus rpc provided RPC-ed interface for interacting with liberdus network for clients. The primary role of rpc is to distribute traffic accorss all the consensor. Rpc also aid in mitigating stress act upon validator for querying chain data such as transaction receipt and account balances from validator nodes by data distribution protocol’s collector. Although it will prefer data from collector server, rpc will fallback towards validator nodes. Rpc also provide websocket chat room subscription for new messages.\nIf what you’re looking for is a pure proxy server that route traffic to the one of the validator, you can use liberdus-proxy instead.\nContent\n\nRPC API Usage\nInternal Documentation\n"}}